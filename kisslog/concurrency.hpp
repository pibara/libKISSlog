//  Copyright (c) 2012, Rob J Meijer
//  Copyright (c) 2012, Torsten Schröder
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.

#ifndef KISSLOG_CONCURRENCY_HPP
#define KISSLOG_CONCURRENCY_HPP
#if defined(__GXX_EXPERIMENTAL_CXX0X__) || __cplusplus >= 201103L
#include <mutex>
#else
#ifndef WIN32
#include <pthread.h>
#else 
#include <windows.h>
#endif
#endif
namespace kisslog {
  //Some helper classes for allowing multi threading (in a crude way) only when needed.
  namespace threading {
    struct SINGLE{};
    struct MULTI{};
#if defined(__GXX_EXPERIMENTAL_CXX0X__) || __cplusplus >= 201103L
    class guard {
        static std::mutex mGlobalMutex; 
      public:
        guard() {
          mGlobalMutex.lock();
        }
        ~guard() {
          mGlobalMutex.unlock();
        }       
    };
#else
#ifndef WIN32
    class guard {
        static pthread_mutex_t mGlobalMutex; 
      public:
        guard() {
          pthread_mutex_lock(&mGlobalMutex);
        }
        ~guard() {
          pthread_mutex_unlock(&mGlobalMutex);
        }       
    };
#else
   //Piece of Win32 code contributed by Torsten Schröder
   namespace detail
   {
     class init_guard {
        static CRITICAL_SECTION mGlobalMutex; 
       public:
        init_guard() {
          InitializeCriticalSection(&mGlobalMutex);
        }
        ~init_guard() {
          DeleteCriticalSection(&mGlobalMutex);
        }       
        CRITICAL_SECTION * operator()() { 
          return &mGlobalMutex; 
        }
        const CRITICAL_SECTION * operator()() const { 
          return &mGlobalMutex; 
        }
     };
  } 
  class guard {
      static detail::init_guard mGlobalMutex; 
    public:
      guard() {
        EnterCriticalSection(mGlobalMutex());
      }
      ~guard() {
        LeaveCriticalSection(mGlobalMutex());
      }       
  };
#endif
#endif
    template <typename T>
    class guard_if_needed {};
    template <>
    class guard_if_needed <MULTI> {
        guard mGuard;      
       public:
        guard_if_needed():mGuard(){}
    };
  }
}
#endif

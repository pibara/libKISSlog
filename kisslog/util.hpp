//  Copyright (c) 2012, Rob J Meijer
//
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.

#ifndef KISSLOG_UTIL_HPP
#define KISSLOG_UTIL_HPP
#include <string>
#include <ctime>

namespace kisslog {
  namespace util {
    template <typename CharType>    
    struct CharUtil; 
    template <>
    struct CharUtil<char> {
      std::char_traits<char>::int_type newline() { return '\n';}
      std::basic_string<char> sp_col_sp() { return " : "; }
      std::basic_string<char> iso_now() {
          time_t ctt = time(0);
          char mbstr[100];
          std::strftime(mbstr, 100, "%FT%TZ", std::localtime(&ctt));
          return mbstr;
      };
      std::basic_string<char> now() {
          return this->iso_now();
      }
      //The content for char strings is ambiguous, but it does not hurt to try and not break utf8 characters in the middle  if its happens to be the content.
      size_t max_char_len() {
         return 4;
      }
      bool can_truncate(char *data,size_t len){ 
         char c2=data[len-1];
         if (c2 < 128) {
            return true;
         }
         char c1=data[len-2];
         if ((c2 > 191)||(c1 > 223)) {
            return false;
         }
         if ((c1 > 191)||(c1 < 128)) {
           return true;
         }
         char c0=data[len-3];
         if (c0 > 239) {
           return false;
         }
         return true;
      } 
    };
    template <>
    struct CharUtil<wchar_t> {
      std::char_traits<wchar_t>::int_type newline() { return L'\n';}
      std::basic_string<wchar_t> sp_col_sp() { return L" : "; }
      size_t max_char_len() {
         return 1;
      }
      //FIXME: we need a wchar_t 'now()' definition also!.
    };
    #if defined(__GXX_EXPERIMENTAL_CXX0X__) || __cplusplus >= 201103L
    template <>
    struct CharUtil<char16_t> {
       std::char_traits<char16_t>::int_type newline() { return u'\n';}
       std::basic_string<char16_t> sp_col_sp() { return u" : "; }  
       size_t max_char_len() {
         return 2;
       }
       bool can_truncate(char16_t *data,size_t len){
         //FIXME
         return true;
       }
    };
    #endif
  }
}
#endif

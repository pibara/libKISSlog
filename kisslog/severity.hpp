//  Copyright (c) 2012, Rob J Meijer
//  Copyright (c) 2012, Evgeny Panasyuk 
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.

#ifndef KISSLOG_SEVERITY_HPP
#define KISSLOG_SEVERITY_HPP
#include <string>

namespace kisslog {
  //A list of log levels as simple classes.
  namespace severity {
    enum Severity {// Numerical codes are from RFC-5424
        EMERG=0, ALERT=1, CRIT=2, ERR=3, WARNING=4, NOTICE=5, INFO=6, DEBUG=7
    };
    template<Severity,typename CharType> inline std::basic_string<CharType> asPrefix();
    template<> inline std::basic_string<char> asPrefix<EMERG,char>(){ return "EMERG"; }
    template<> inline std::basic_string<char> asPrefix<ALERT,char>(){ return "ALERT"; }
    template<> inline std::basic_string<char> asPrefix<CRIT,char>(){ return "CRIT"; }
    template<> inline std::basic_string<char> asPrefix<ERR,char>(){ return "ERR"; }
    template<> inline std::basic_string<char> asPrefix<WARNING,char>(){ return "WARNING"; }
    template<> inline std::basic_string<char> asPrefix<NOTICE,char>(){ return "NOTICE"; }
    template<> inline std::basic_string<char> asPrefix<INFO,char>(){ return "INFO"; }
    template<> inline std::basic_string<char> asPrefix<DEBUG,char>(){ return "DEBUG"; }
    template<> inline std::basic_string<wchar_t> asPrefix<EMERG,wchar_t>(){ return L"EMERG"; }
    template<> inline std::basic_string<wchar_t> asPrefix<ALERT,wchar_t>(){ return L"ALERT"; }
    template<> inline std::basic_string<wchar_t> asPrefix<CRIT,wchar_t>(){ return L"CRIT"; }
    template<> inline std::basic_string<wchar_t> asPrefix<ERR,wchar_t>(){ return L"ERR"; }
    template<> inline std::basic_string<wchar_t> asPrefix<WARNING,wchar_t>(){ return L"WARNING"; }
    template<> inline std::basic_string<wchar_t> asPrefix<NOTICE,wchar_t>(){ return L"NOTICE"; }
    template<> inline std::basic_string<wchar_t> asPrefix<INFO,wchar_t>(){ return L"INFO"; }
    template<> inline std::basic_string<wchar_t> asPrefix<DEBUG,wchar_t>(){ return L"DEBUG"; }
  }
}
#endif

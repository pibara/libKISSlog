//  Copyright (c) 2012, Rob J Meijer
//
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.

#ifndef LOG_LITE_HPP
#define LOG_LITE_HPP
#include <syslog.h>
#include <string.h>
#include <mutex>
#include <string>
#include <streambuf>
#include <iostream>
namespace loglite {
  //An list of syslog facilities as simple classes. Note that these are not all possible
  //facilities, just the one a typical user space program will be using.
  namespace facility {
    struct DAEMON {
      static int asSyslogFacility() {
        return LOG_DAEMON;
      }
    };
    struct LOCAL0 {
      static int asSyslogFacility() {
        return LOG_LOCAL0;
      }
    };
    struct LOCAL1 {
      static int asSyslogFacility() {
        return LOG_LOCAL1;
      }
    };
    struct LOCAL2 {
      static int asSyslogFacility() {
        return LOG_LOCAL2;
      }
    };
    struct LOCAL3 {
      static int asSyslogFacility() {
        return LOG_LOCAL3;
      }
    };
    struct LOCAL4 {
      static int asSyslogFacility() {
        return LOG_LOCAL4;
      }
    };
    struct LOCAL5 {
      static int asSyslogFacility() {
        return LOG_LOCAL5;
      }
    };
    struct LOCAL6 {
      static int asSyslogFacility() {
        return LOG_LOCAL6;
      }
    };
    struct LOCAL7 {
      static int asSyslogFacility() {
        return LOG_LOCAL7;
      }
    };
    struct USER {
      static int asSyslogFacility() {
        return LOG_USER;
      }
    }; 
  }
  //Some helper classes for allowing multi threading (in a crude way) only when needed.
  namespace threading {
    struct SINGLE{};
    struct MULTI{};
    class guard {
        static std::mutex mGlobalMutex; 
      public:
        guard() {
          mGlobalMutex.lock();
        }
        ~guard() {
          mGlobalMutex.unlock();
        }       
    };
    template <typename T>
    class guard_if_needed {};
    template <>
    class guard_if_needed <MULTI> {
        guard mGuard;      
    };
  }
  //A list of log levels as simple classes.
  namespace severity {
    struct DEBUG {
       static int asSyslogLevel() {
         return LOG_DEBUG;
       }
       static std::string asPrefix() {
          return "DEBUG";
       }
       static int Comparable() {
         return 0;
       }
    };
    struct INFO {
       static int asSyslogLevel() {
         return LOG_INFO;
       }
       static std::string asPrefix() {
          return "INFO";
       }
       static int Comparable() {
         return 1;
       }
    };
    struct NOTICE {
       static int asSyslogLevel() {
         return LOG_NOTICE;
       }
       static std::string asPrefix() {
          return "NOTICE";
       }
       static int Comparable() {
         return 2;
       }
    };
    struct WARNING {
       static int asSyslogLevel() {
         return LOG_WARNING;
       }
       static std::string asPrefix() {
          return "WARNING";
       }
       static int Comparable() {
         return 3;
       }
    };
    struct ERR {
       static int asSyslogLevel() {
         return LOG_ERR;
       }
       static std::string asPrefix() {
          return "ERR";
       }
       static int Comparable() {
         return 4;
       }
    };
    struct CRIT {
       static int asSyslogLevel() {
         return LOG_CRIT;
       }
       static std::string asPrefix() {
          return "CRIT";
       }
       static int Comparable() {
         return 5;
       }
    };
    struct ALERT {
       static int asSyslogLevel() {
         return LOG_ALERT;
       }
       static std::string asPrefix() {
          return "ALERT";
       }
       static int Comparable() {
         return 6;
       }
    };
    struct EMERG {
       static int asSyslogLevel() {
         return LOG_EMERG;
       }
       static std::string asPrefix() {
          return "EMERG";
       }
       static int Comparable() {
         return 7;
       }
    };
  }
  //Some raw loggers, well one actually, currently.There is only a syslog raw logger now but we could add a stream logger here maybe.
  namespace rawlogger {
    template <typename F,typename G>
    class sysloglogger {
        std::string mIdent;
      public:
        sysloglogger(std::string ident):mIdent(ident) {
          openlog(mIdent.c_str(),LOG_PID, F::asSyslogFacility());    
        } 
        ~sysloglogger() {
           closelog();
        }

        template <typename T,typename R>
        void log(std::string line) {
           if (not (T::Comparable() < R::Comparable())) {
             threading::guard_if_needed<G> myguard;
             syslog(T::asSyslogLevel(),"%s",line.c_str());
           };
        }
    };
  }
  //A simple streambuf for any raw logger. Makes  things line oriented and cuts of lines at
  //some maximum length.
  template <typename L,typename S,typename R>
  class logstreambuf : public std::streambuf {
      L &mLogger;
      std::string mPrefix;
      char data[256];
      size_t index;
    public:
      logstreambuf(L logger):mLogger(logger){
        setp(0,0);
        setg(0,0,0);
        index=0;
      }
      int overflow(int c) {
        setp(0,0);
        if (c != std::char_traits<char>::eof()) {
          data[index]=c;
          index++;
        }
        if ((c == '\n') || (index == 255) || (c == std::char_traits<char>::eof())) {
          data[index]=0;
          mLogger.template log<S,R>((std::string(S::asPrefix()) + " : " + data).c_str());
          index=0;
        }
        if (c != std::char_traits<char>::eof()) return 0;
          return c;
      }
  };
  
  //To give the logging lib a friendly API, we define a common abstract basecalass for all loggers.
  //This should allow passing a logger reference to the constructor of client classes without hooking those
  //client classes into our template hyrarchy.
  struct logger_base {
     virtual std::ostream &debug()=0;
     virtual std::ostream &info()=0;
     virtual std::ostream &notice()=0;
     virtual std::ostream &warning()=0;
     virtual std::ostream &err()=0;
     virtual std::ostream &crit()=0;
     virtual std::ostream &alert()=0;
     virtual std::ostream &emerg()=0;
  };

  //The actual logger.
  template <typename R,typename S>
  class logger: public logger_base {
    R &mRawLogger;
    logstreambuf<R,severity::DEBUG,S> mDebugSb;
    std::ostream mDebugStream;
    logstreambuf<R,severity::INFO,S> mInfoSb;
    std::ostream mInfoStream;
    logstreambuf<R,severity::NOTICE,S> mNoticeSb;
    std::ostream mNoticeStream;
    logstreambuf<R,severity::WARNING,S> mWarningSb;
    std::ostream mWarningStream;
    logstreambuf<R,severity::ERR,S> mErrSb;
    std::ostream mErrStream;
    logstreambuf<R,severity::CRIT,S> mCritSb;
    std::ostream mCritStream;
    logstreambuf<R,severity::ALERT,S> mAlertSb;
    std::ostream mAlertStream;
    logstreambuf<R,severity::EMERG,S> mEmergSb;
    std::ostream mEmergStream;
  public: 
    logger(R &sl):mRawLogger(sl),mDebugSb(mRawLogger),mDebugStream(&mDebugSb),
                                 mInfoSb(mRawLogger),mInfoStream(&mInfoSb),
                                 mNoticeSb(mRawLogger),mNoticeStream(&mNoticeSb),
                                 mWarningSb(mRawLogger),mWarningStream(&mWarningSb),
                                 mErrSb(mRawLogger),mErrStream(&mErrSb),
                                 mCritSb(mRawLogger),mCritStream(&mCritSb),
                                 mAlertSb(mRawLogger),mAlertStream(&mAlertSb),
                                 mEmergSb(mRawLogger),mEmergStream(&mEmergSb)
                                 {}
    std::ostream &debug() { return mDebugStream;}
    std::ostream &info() { return mInfoStream;}
    std::ostream &notice() { return mNoticeStream;}
    std::ostream &warning() { return mWarningStream;}
    std::ostream &err() { return mErrStream;}
    std::ostream &crit() { return mCritStream;}
    std::ostream &alert() { return mAlertStream;}
    std::ostream &emerg() { return mEmergStream;}
  };
}
#endif
